@startuml
!theme vibrant

class GameManager{
    + float timer
    + bool is_started
    + BeatController bc
    + NetManager net
    + is_paused

    - PlayerScene[] players
    PlayerScene get_other_player(id)
    ----------------------------------
    void rand_choose_actions()
    void show_cards()
    void add_item_rpc(BaseItem)
    -------
    void respawn_player()
    ------------------------
    void start_game()
    void pause_game()
    void end_game()
    void add_player()
}


class EnemySpawner{
  + SpawnResource[] list_of_spawns
}

class BeatController{
    + int bpm_change_signal
    + int BPM
    + bool is_on_beat()
    + void change_bpm()
}   

class NetManager{
    void on_peer_connect()
    void add_player()

}

class Ability {
    +String name
    +String type
    *State[] states 
 
    void ability_logic()
    void reset()
}

class HeroScene{
  +Animations anims
  +MultiplayerSynchronizer input
  +StateMachine state_machine
  
  + Action attack
  + Ability ability1
  + Ability ability2
  + Ability ultimate
  + Ability passive

  void innit(HeroResource)
  void add_item()
  void on_death()
}

class BaseState{
    +StateMachine sm
    +args[] any_arguement_that_is_needed
    void enter()
    void update()
    void exit()
}

class StateMachine{
    +BaseState[] states
   -BaseState _current_state
   ---------------------------
   signal change_state(self, new_state)
}

class IdleState{
  
}

class AutoState{

}

StateMachine <|-- BaseState : needs
BaseState <|-- IdleState

class Action{
    +String name
    +String description
    +int cooldown
    +int level
   
    +State item_state
   
    void upgrade()
}


class ActionSet{
  +HeroScene owner
  + Item item1
  + Item item2
  + Item item3
  + Item item4
  + Action attack
  + Ability ability1
  + Ability ability2
  + Ability ultimate
  + Ability passive
}




class Character{
  +Stat char_stats
  +String name
}
class UIManager(){
  void set_item_ui(Item)
}


class Item {
    +Stat stats
   
   
    void any_item_logic()
}

class Stat{
    +int maxhp
    +int spd
    +int aoe
    +int dur
    +int rgn
    +int anyotherstat
    +String name
}


class Enemy{
  void path()
  void decide()
}


class ActionHelper{
    +void SpawnCircle( function )
}

'This class spawns a pop_up text of whatever you want
class TextPopUp{
    -const DEFAULT_COLOR
    -const DEFAULT_DURATION 
    -bool started

    +void on_fade_timeout()
    +void reset()
    +void set_text(text, gpos,color = DEFAULT_COLOR, duration = DEFAULT_COLOR)
}

Character <|-- Enemy
Character <|-- HeroScene
Action <|-- Item : is
Action <|-- Ability : is
HeroScene *-- ActionSet : part of
GameManager *-- BeatController
GameManager *-- NetManager 
GameManager *-- EnemySpawner

@enduml